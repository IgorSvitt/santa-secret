from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from state.user_state import MessageState
from keyboard import for_main
from data import user_db, item_db

router = Router()
users = user_db.UserDB()
items = item_db.ItemDB()


@router.message(F.text == "üéÖ –ö–æ–º—É —è –¥–∞—Ä—é –ø–æ–¥–∞—Ä–æ–∫?")
async def my_santa_handler(message: Message, state: FSMContext) -> None:
    try:
        me = await users.get_user(message.from_user.id)
        my_santa_id = me[7]
        santa = await users.get_santa(my_santa_id)
        if santa:
            user_items = await items.get_items(santa[0])
            text = ""
            for i in range(len(user_items)):
                text += f"{i + 1}) <b>{user_items[i][0]}</b>\n\n"

            if text == "":
                text = "–£ –Ω–µ–≥–æ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π üòî"

            await message.answer(
                f"–¢—ã –¥–∞—Ä–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ <b>{santa[1]}</b>üéÖ \n\n"
                f"–ï–≥–æ username: @{santa[2]}\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º: {santa[3]}\n"
                f"–ï–≥–æ –∫–æ–º–Ω–∞—Ç–∞: {santa[4]}\n"
                f"–ï–≥–æ –í–ö: {santa[5]}\n\n"
                f"–ï–≥–æ –∂–µ–ª–∞–Ω–∏—è:\n{text}",
                reply_markup=for_main.main_buttons()
            )
        else:
            await message.answer(
                "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –µ—â–µ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª\n",
                reply_markup=for_main.main_buttons()
            )
    except Exception as e:
        print(e)
        await message.answer(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_main.main_buttons()
        )


@router.message(F.text == "üéÑ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def write_message_handler(message: Message, state: FSMContext) -> None:
    # await message.answer(
    #     "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–∏–∫—É üéÖ",
    #     reply_markup=for_main.cancel_keyboard()
    # )
    # await state.set_state(MessageState.text)
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")


@router.message(MessageState.text)
async def write_message_handler(message: Message, state: FSMContext) -> None:
    try:
        me = await users.get_user(message.from_user.id)
        my_santa_id = me[7]
        santa = await users.get_santa(my_santa_id)
        if santa:
            await message.bot.send_message(
                chat_id=santa[0],
                text=f"–¢–µ–±–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –°–∞–Ω—Ç—ã üéÖ\n\n"
                     f"{message.text}",
                reply_markup=for_main.main_buttons()
            )
        else:
            await message.answer(
                "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –µ—â–µ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª\n",
                reply_markup=for_main.main_buttons()
            )
    except Exception as e:
        print(e)
        await message.answer(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_main.main_buttons()
        )
    await state.clear()


@router.callback_query(F.data == "send_answer")
async def send_answer_handler(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.edit_reply_markup()
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–∞–Ω—Ç–µ üéÖ",
        reply_markup=for_main.cancel_keyboard()
    )
    await state.set_state(MessageState.answer)


@router.message(MessageState.answer)
async def send_answer_handler(message: Message, state: FSMContext) -> None:
    try:
        me = await users.get_user(message.from_user.id)
        my_santa_id = me[6]
        santa = await users.get_santa(my_santa_id)
        if santa:
            await message.bot.send_message(
                chat_id=santa[0],
                text=f"–¢–µ–±–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –°–∞–Ω—Ç—ã üéÖ\n\n"
                     f"{message.text}",
                reply_markup=for_main.main_buttons()
            )
        else:
            await message.answer(
                "–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –µ—â–µ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª\n",
                reply_markup=for_main.main_buttons()
            )
    except Exception as e:
        print(e)
        await message.answer(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_main.main_buttons()
        )
    await state.clear()
