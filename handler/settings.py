from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from keyboard import for_settings
from data import user_db
from state import settings_state

router = Router()
user = user_db.UserDB()


@router.message(F.text == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìù")
@router.message(F.text == "‚öô –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ")
async def my_data(message: Message, state: FSMContext) -> None:
    info = await user.get_user(message.from_user.id)
    name = info[1]
    room = info[4]
    link_to_vk = info[5]
    about = info[3]

    await message.answer(
        text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìù:\n"
             f"–ò–º—è: <code>{name}</code>\n"
             f"–ö–æ–º–Ω–∞—Ç–∞: <code>{room}</code>\n"
             f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ: <code>{about}</code>\n"
             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö: <code>{link_to_vk}</code>\n\n",
        reply_markup=for_settings.setting_keyboards()
    )


@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚úè")
async def change_name(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è",
        reply_markup=for_settings.cancel_keyboard()
    )
    await state.set_state(settings_state.UserSetting.name)


@router.message(settings_state.UserSetting.name)
async def change_name(message: Message, state: FSMContext) -> None:
    try:
        await user.change_name(message.from_user.id, message.text)
        await message.answer(
            text="–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ",
            reply_markup=for_settings.setting_keyboards()
        )
    except Exception as e:
        print(e)
        await message.answer(
            text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_settings.setting_keyboards()
        )

    await state.clear()


@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã ‚úè")
async def change_room(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É",
        reply_markup=for_settings.cancel_keyboard()
    )
    await state.set_state(settings_state.UserSetting.room)


@router.message(settings_state.UserSetting.room)
async def change_room(message: Message, state: FSMContext) -> None:
    try:
        await user.change_room(message.from_user.id, message.text)
        await message.answer(
            text="–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ",
            reply_markup=for_settings.setting_keyboards()
        )
    except Exception as e:
        print(e)
        await message.answer(
            text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_settings.setting_keyboards()
        )

    await state.clear()


@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö ‚úè")
async def change_link_to_vk(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö",
        reply_markup=for_settings.cancel_keyboard()
    )
    await state.set_state(settings_state.UserSetting.link_to_vk)


@router.message(settings_state.UserSetting.link_to_vk)
async def change_link_to_vk(message: Message, state: FSMContext) -> None:
    try:
        await user.change_link_to_vk(message.from_user.id, message.text)
        await message.answer(
            text="–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ",
            reply_markup=for_settings.setting_keyboards()
        )
    except Exception as e:
        print(e)
        await message.answer(
            text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_settings.setting_keyboards()
        )

    await state.clear()


@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ ‚úè")
async def change_info(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ",
        reply_markup=for_settings.cancel_keyboard()
    )
    await state.set_state(settings_state.UserSetting.info)


@router.message(settings_state.UserSetting.info)
async def change_info(message: Message, state: FSMContext) -> None:
    try:
        await user.change_about(message.from_user.id, message.text)
        await message.answer(
            text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ",
            reply_markup=for_settings.setting_keyboards()
        )
    except Exception as e:
        print(e)
        await message.answer(
            text="–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_settings.setting_keyboards()
        )

    await state.clear()


@router.callback_query(F.data == "cancel_setting")
async def cancel_setting(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå",
        reply_markup=for_settings.setting_keyboards()
    )
    await state.clear()
