from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from keyboard import for_item
from data import item_db
from state.item_state import Item, ItemChange, ItemDelete

router = Router()
item = item_db.ItemDB()


@router.message(F.text == "üéÅ –ú–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π")
async def my_item_handler(message: Message, state: FSMContext) -> None:
    items = await item.get_items(message.from_user.id)
    if not items:
        await message.answer(
            "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç üòî\n\n",
            reply_markup=for_item.item_keyboards()
        )
    else:
        text = ""
        for i in range(len(items)):
            text += f"{i + 1}) <b>{items[i][0]}</b>\n"
        await message.answer(
            "–í–æ—Ç —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:\n"
            f"{text}",
            reply_markup=for_item.item_keyboards()
        )


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ üéÅ")
async def add_item_handler(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        reply_markup=for_item.cancel_keyboard()
    )
    await state.set_state(Item.name)


@router.message(Item.name)
async def add_item_handler(message: Message, state: FSMContext) -> None:
    try:
        await item.add_item(message.from_user.id, message.text)
        await message.answer(
            "–¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ üéÅ",
            reply_markup=for_item.item_keyboards()
        )
        items = await item.get_items(message.from_user.id)
        text = ""
        for i in range(len(items)):
            text += f"{i + 1}) <b>{items[i][0]}</b>\n"
        await message.answer(
            "–í–æ—Ç —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:\n"
            f"{text}",
            reply_markup=for_item.item_keyboards()
        )
    except Exception as e:
        print(e)
        await message.answer(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n",
            reply_markup=for_item.item_keyboards()
        )
    await state.clear()


@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ ‚úè")
async def change_item_handler(message: Message, state: FSMContext) -> None:
    items = await item.get_items(message.from_user.id)
    if items == "":
        await message.answer(
            "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç üòî\n\n",
            reply_markup=for_item.item_keyboards()
        )
    else:
        names = []
        ids = []
        for i in range(len(items)):
            names.append(items[i][0])
            ids.append(items[i][1])
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å ‚ùå",
            reply_markup=for_item.update_item_keyboard(names, ids)
        )


@router.callback_query(F.data.startswith("update_item_"))
async def update_item_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ ‚úè",
        reply_markup=for_item.cancel_keyboard()
    )
    await state.update_data(id=int(callback.data.split("_")[2]))
    await state.set_state(ItemChange.new_name)


@router.message(ItemChange.new_name)
async def update_item_handler(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    await item.change_item(itemid=data['id'], new_name=message.text)
    await message.answer(
        "–¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úè",
        reply_markup=for_item.item_keyboards()
    )
    await state.clear()


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ ‚ùå")
async def delete_item_handler(message: Message, state: FSMContext) -> None:
    items = await item.get_items(message.from_user.id)
    if items == "":
        await message.answer(
            "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç üòî\n\n",
            reply_markup=for_item.item_keyboards()
        )
    else:
        names = []
        ids = []
        for i in range(len(items)):
            names.append(items[i][0])
            ids.append(items[i][1])
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å ‚ùå",
            reply_markup=for_item.delete_item_keyboard(names, ids)
        )


@router.callback_query(F.data.startswith("delete_item_"))
async def delete_item_handler(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await callback.message.edit_reply_markup()
        delete_item_id = callback.data.split("_")[2]
        await item.delete_item(int(delete_item_id))
        await callback.message.answer(
            "–¢–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ ‚úÖ",
            reply_markup=for_item.item_keyboards()
        )
    except Exception as e:
        print(e)
        await callback.message.answer(
            "–¢–∞–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –Ω–µ—Ç ‚ùå",
            reply_markup=for_item.item_keyboards()
        )

    await state.clear()


@router.callback_query(F.data == "cancel_item")
async def cancel_handler(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.edit_reply_markup()
    await call.message.delete()
    await state.clear()
    await call.message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå",
        reply_markup=for_item.item_keyboards()
    )
    await state.clear()
